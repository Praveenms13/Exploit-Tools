#! /usr/bin/python3

import scapy.all as scapy
import optparse

# ------------------------- Send Packets -----------------------------------#
def scan(ip):
    # scapy.ls(scapy.Ether())
    # scapy.ls(scapy.ARP())
    arpRequest = scapy.ARP(pdst=ip) #Represents Packet Request(Instance of ARP Packet Object.)
    # arpRequest.show()
    # arpRequest.pdst = ip
    # print(arpRequest.summary())
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff") #Represents Packet Request(Instance of Ether Packet Object.)
    # broadcast.show()
    # broadcast.dst = "ff:ff:ff:ff:ff:ff"
    arpRequestBroadcast = broadcast/arpRequest
    # print(arpRequestBroadcast.summary())
    # arpRequestBroadcast.show() #Can be done for all -----
    # answeredList, unansweredList = scapy.srp(arpRequestBroadcast, timeout=1)
    answeredList = scapy.srp(arpRequestBroadcast, timeout=1, verbose=False)[0] # send and recieve packets(p for custom ether)
    # print("-------------")
    # print(answeredList.summary())
    # print("-------------")
    clientDataList = []
    for clientData in answeredList:
        # print(clientData[0])
        # print(clientData[1].show())
        clientDataDict = {"IP":clientData[1].psrc, "MacAddress":clientData[1].hwsrc}
        clientDataList.append(clientDataDict)
    
    return clientDataList
# ---------------------------------------------------------------------#

# --------------------- Print Results------------------------------------------#
def printResults(resutsList):
    print("--------------------------------------------")
    print("    IP\t\t\tMAC Address\n--------------------------------------------")
    for client in resutsList:
        print(f"{client['IP']}\t\t{client['MacAddress']}")
    print("--------------------------------------------")
# ---------------------------------------------------------------------#

# ---------------------------------------------------------------------#
def getArguements():
    parser = optparse.OptionParser()
    parser.add_option(
        "-t",
        "--target",
        dest="Target",
        help="Target of the IP/IP Range to scan.",
    )
    (options, arguements) = parser.parse_args()
    if not options.Target:
        parser.error("[-] Please specify an target, use --help for more info.")
    return options
# ---------------------------------------------------------------------#

options = getArguements()
scanResult = scan(options.Target)
printResults(scanResult)